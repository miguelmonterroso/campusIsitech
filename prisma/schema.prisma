generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int               @id @default(autoincrement())
  name            String
  email           String            @unique
  password        String
  role            Role              @default(STUDENT)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  isScholarship   Boolean           @default(false)
  courses         Enrollment[]
  teaching        Course[]          @relation("InstructorCourses")
  billingInfo     Billing[]
  courseSchedules CourseSchedule[]  @relation("CourseScheduleInstructor")
}

enum Role {
  STUDENT
  INSTRUCTOR
}

model Course {
  id             Int             @id @default(autoincrement())
  name           String
  description    String
  image          String
  price          Float
  durationMonths Int
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  instructor   User         @relation("InstructorCourses", fields: [instructorId], references: [id])
  instructorId Int
  lessons      Lesson[]
  billings     Billing[]
  schedules    CourseSchedule[]
}

model CourseSchedule {
  id           Int       @id @default(autoincrement())
  course       Course    @relation(fields: [courseId], references: [id])
  courseId     Int
  instructor   User?     @relation("CourseScheduleInstructor", fields: [instructorId], references: [id])
  instructorId Int?
  dayPattern   String    
  startDate    DateTime  
  cupo         Int       
  zoomLink     String?   
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  enrollments  Enrollment[]
}

model Lesson {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  videoUrl    String
  course      Course   @relation(fields: [courseId], references: [id])
  courseId    Int
  createdAt   DateTime @default(now())
}

model Billing {
  id           Int      @id @default(autoincrement())
  user         User     @relation(fields: [userId], references: [id])
  userId       Int
  course       Course   @relation(fields: [courseId], references: [id])
  courseId     Int
  amount       Float
  dueDate      DateTime
  status       Status   @default(PENDING)
  createdAt    DateTime @default(now())

  enrollment   Enrollment?
}

enum Status {
  PENDING
  PAID
  OVERDUE
}

model Enrollment {
  id                Int              @id @default(autoincrement())
  student           User             @relation(fields: [studentId], references: [id])
  studentId         Int
  courseSchedule    CourseSchedule   @relation(fields: [courseScheduleId], references: [id])
  courseScheduleId  Int
  billing           Billing          @relation(fields: [billingId], references: [id])
  billingId         Int              @unique
  status            EnrollmentStatus @default(PENDING)
  createdAt         DateTime         @default(now())

  @@unique([studentId, courseScheduleId])
}

enum EnrollmentStatus {
  PENDING
  ACTIVE
  CANCELLED
}

model InterestedUser {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  phone     String
  message   String?  
  referral  String? 

  createdAt DateTime @default(now())

  @@unique([email])
}